<?php

namespace App\Http\Controllers;

use App\CaesarCipher;
use Illuminate\Http\Request;
use Illuminate\Support\Arr;

class OpenQuizController extends Controller
{
    /**
     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\Routing\ResponseFactory|\Illuminate\Foundation\Application|\Illuminate\Http\Response
     */
    public function index()
    {
        // –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–∂–∞—Ç –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω
        $evalWrongWayText = "echo '–¢–∞–π–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –æ–∫—Ä—É–∂–∞—é—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–µ–ª–∏–∫–æ–≥–æ —Ä–∏–º—Å–∫–æ–≥–æ –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ì–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —É –Ω–µ–≥–æ –±—ã–ª–æ –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–∞–¥–æ–∫ –∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫. –û–¥–∏–Ω –∏–∑ –µ–≥–æ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–π - –ø—É—Ç—å –∫ —Å–∫—Ä—ã—Ç–æ–º—É —Å–æ–∫—Ä–æ–≤–∏—â—É - —Ç—Ä–µ–±–æ–≤–∞–ª —Ä–∞–∑–≥–∞–¥–∫–∏ –æ—Å–æ–±—ã—Ö –∑–Ω–∞–∫–æ–≤, –ø–µ—Ä–µ–ø–ª–µ—Ç–µ–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª–æ–≤–∞—Ö –∏ —Ñ—Ä–∞–∑–∞—Ö';";

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        $evalWrongWay = sprintf('eval(base64_decode(%s));', var_export(base64_encode($evalWrongWayText), true));

        $helpCaesarCipher = (new CaesarCipher(11))->encrypt('–ù–∞–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–∑–æ—Ä –Ω–∞ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞.');

        return response(view('pages.open', [
            'evalWrongWay'     => $evalWrongWay,
            'helpCaesarCipher' => $helpCaesarCipher,
        ]))->withHeaders([
            'X-Goronich-Key' => (new CaesarCipher(11))->alphabet(CaesarCipher::ALPHABET_EN)->encrypt(route('quiz.goronich')),
        ]);
    }

    /**
     * @return string
     */
    public function goronich(Request $request)
    {
        if ($request->isMethod('DELETE')) {
            $text = base64_encode('–¢–≤–æ—è –ø–æ–±–µ–¥–∞ –Ω–∞–¥–æ –º–Ω–æ–π –Ω–µ–æ—Å–ø–æ—Ä–∏–º–∞! –ò —Å–µ–π—á–∞—Å —è —Ä–∞—Å–∫—Ä—ã–≤–∞—é —Ç–µ–±–µ —Ç–∞–π–Ω—É: –≤—Å–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –ª–µ–∂–∞—Ç –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π –Ω–∞ —Å–∞–º–æ–º –≤–∏–¥–Ω–æ–º –º–µ—Å—Ç–µ, —Ö–æ—Ç—è –∏ –º–∞—Å–∫–∏—Ä—É—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–º–æ—Ç—Ä–∏—Å—å –∫ –Ω–∏–º, —Ä–∞–∑–≥–∞–¥–∞–π –∏—Ö —Å–∫—Ä—ã—Ç—ã–π —Å–º—ã—Å–ª.');
            $chars = str_split($text);
            $badText = '';

            foreach ($chars as $key => $char) {

                $badText .= $char;

                if (array_key_last($chars) !== $key) {
                    $badText .= Arr::random(['@', '#', '$', '%', 'ü•π', 'üò¢', 'ü´†']);
                }
            }

            $message = "–ó–º–µ–π –ì–æ—Ä—ã–Ω—ã—á –±—ã–ª –ø–æ–±–µ–∂–¥–µ–Ω! –í –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–∏—è –æ–Ω –ø—Ä–æ—à–µ–ø—Ç–∞–ª –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–µ —Å–ª–æ–≤–∞: $badText";

            return response($message)->withHeaders([
                'Content-Type'   => 'text/plain; charset=utf-8',
                'X-Vasilisa-Say' => '–ù–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–µ —Å–ª–æ–≤–∞, –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–º, –∫–∞–∂—É—Ç—Å—è –∏–º–µ—é—Ç –º–Ω–æ–≥–æ –ª–∏—à–Ω–∏—Ö –∑–≤—É–∫–æ–≤. –î–∞–π-–∫–∞-–ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∑–∞ —ç—Ç–æ–π —Ç–∞–π–Ω–æ–π...',
            ]);
        }

        $useLaravel = (new \App\CaesarCipher(11))
            ->encrypt('–¢—ã —Å—Ç–æ–∏—à—å –ø–µ—Ä–µ–¥ –ó–º–µ–µ–º –ì–æ—Ä—ã–Ω—ã—á–µ–º, –∫–æ—Ç–æ—Ä—ã–π –≥—Ä–æ–∑–∏—Ç –ø–æ–≥—É–±–∏—Ç—å —Ç–µ–±—è. –¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –µ–≥–æ –≤–µ–ª–∏—á–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–ª—É –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Laravel.');

        return response($useLaravel)->withHeaders([
            'Content-Type'   => 'text/plain; charset=utf-8',
            'X-Vasilisa-Say' => '–û—Ç–∫—Ä–æ–π –Ω–µ–æ–±—ã—á–Ω—ã–µ –≤—Ä–∞—Ç–∞ –ø–æ–∑–Ω–∞–Ω–∏—è, –∏—Å—Å–ª–µ–¥—É–π —Ç–∞–π–Ω—É —Å –Ω–æ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –≤–º–µ—Å—Ç–æ –ø—Ä–∏–≤—ã—á–Ω–æ–≥–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å –∑–∞–ø—Ä–æ—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–æ—Å–∏—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ. –í —ç—Ç–æ–º –Ω–µ–æ–±—ã—á–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–ª—é—á, —á—Ç–æ–±—ã —Ä–∞–∑–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∫—É.',
        ]);
    }
}
