import { Controller } from '@hotwired/stimulus';

export default class extends Controller {
    static targets = [
        'word',
        'attempts',
        'hangmanInput',
        'audioWrong',
        'audioLose',
        'audioWin',
        'hearts',
        'image',
        'log',
    ];

    connect() {
        this.wordList = [
            '–ú–∏–≥—Ä–∞—Ü–∏—è',
            '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä',
            '–ú–æ–¥–µ–ª—å',
            '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ',
            '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            '–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ',
            '–§–∞—Å–∞–¥',
            '–ê—Ä—Ç–∏–∑–∞–Ω',
            '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç',
            '–ó–∞–ø—Ä–æ—Å',
            '–û—Ç–≤–µ—Ç',
            '–§–∏–ª—å—Ç—Ä',
            '–í–∞–ª–∏–¥–∞—Ü–∏—è',
            '–®–∞–±–ª–æ–Ω',
            '–°–µ—Å—Å–∏—è',
            '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è',
            '–ö–æ–Ω—Å–æ–ª—å',
            '–ú–∞–∫–µ—Ç',
            '–î–∏—Ä–µ–∫—Ç–∏–≤–∞',
            '–§–∞–±—Ä–∏–∫–∞',
            '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ',
            '–ë–ª–µ–π–¥',
            '–ü—Ä–æ–≤–∞–π–¥–µ—Ä',
            '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä',
            '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
            '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
            '–§–∞—Å–∞–¥',
            '–û—á–µ—Ä–µ–¥—å',
            '–¢–∞—Å–∫',
            '–°–±–æ—Ä–∫–∞',
            '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
            '–ú–∞—Ä—à—Ä—É—Ç',
            '–ö–æ–º–ø–æ–∑–µ—Ä',
            '–¢—Ä–µ–π—Ç',
            '–ú–µ—Ç–æ–¥',
            '–ö—ç—à',
            '–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞',
            '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è',
            '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
            '–ü–∞–∫–µ—Ç',
            '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ',
            '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
            '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            '–û–ø–µ—Ä–∞—Ç–æ—Ä',
            '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
            '–°–µ—Ä–≤–∏—Å',
            '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä',
            '–°—Ç—Ä—É–∫—Ç—É—Ä–∞',
            '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞',
            '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
            '–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
            '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
            '–ë—ç–∫–∞–ø',
            '–ö–æ–º–ø–∏–ª—è—Ü–∏—è',
            '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ',
            '–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ',
            '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
            '–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è',
            '–ö–ª–∏–µ–Ω—Ç',
            '–°–µ—Ä–≤–µ—Ä',

            '–ê–π–¥–∏—à–Ω–∏–∫',
            '–ê–ø–∏—à–∫–∞',
            '–ê—É—Ç—Å–æ—Ä—Å',
            '–ë–∞–≥',
            '–ë—ç–∫–∞–ø',
            '–í—ã–ø–∞–¥–∞—à–∫–∞',
            '–î–≤–∏–∂–æ–∫',
            '–î–µ–ø–ª–æ–π',
            '–ñ–∞–±–∞—Å–∫—Ä–∏–ø—Ç',
            '–õ–µ–≥–∞—Å–∏',
            '–ü–∞–¥–∞–≤–∞–Ω',
            '–ü—ç—Ö–∞–ø—ç',
            '–ü—ã—Ö–∞',
            '–¢–∞—Å–∫–∞',
            '–§–∏–¥–±–µ–∫',
            '–§—Ä–µ–π–º–≤–æ—Ä–∫',
            '–•–∞—Ä–¥–∫–æ–¥',
            '–ê–ø–¥–µ–π—Ç',
            '–ê–ø–≥—Ä–µ–π–¥',
            '–ê—Ç—Ç–∞—á',
            '–í–∞–ª–∏–¥–Ω—ã–π',
            '–í–∏–Ω–¥—É–∑—è—Ç–Ω–∏–∫',
            '–ì–æ–≤–Ω–æ–∫–æ–¥',
            '–ì—É–≥–ª–∏—Ç—å',
            '–î–µ–∫—Ä–µ–º–µ–Ω—Ç',
            '–î–∂—É–Ω',
            '–î–æ–∫–∞',
            '–î—ã—Ä–∞',
            '–ö—Ä–∞–∫–æ–∑—è–±—Ä–∞',
            '–õ–æ–∫–∞–ª–∫–∞',
            '–ú–∞–Ω–∞–≥–µ—Ä',
            '–ù–∞—Ç–∏–≤–Ω—ã–π',
            '–ü—Ä–æ–¥–∞–∫—à–Ω',
            '–†–µ–¥–∏—Ä–µ–∫—Ç',
            '–°–ª–æ—É–ø–æ–∫',
            '–°–ø–∞–º',
            '–¢—Ä–æ–ª–ª–∏—Ç—å',
            '–§–æ—Ä–º–æ—à–ª–µ–ø—Å—Ç–≤–æ',
            '–•–∞–∫–∞—Ç–æ–Ω',
            '–•–æ–ª–∏–≤–∞—Ä',
            '–≠–∫—Å–ø–ª–æ–π—Ç',
            '–Ø–±–ª–æ—á–Ω–∏–∫',
        ];

        this.badList = [
            '–ó–∞—á–µ–º –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å? –í–∞—à–∞ –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å WordPress –≤—ã–¥–∞–µ—Ç –≤–∞—Å!',
            '–ï—Å–ª–∏ –Ω–µ —É–≥–∞–¥–∞–µ—Ç–µ —Å–Ω–æ–≤–∞, Yii –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤–∞—à–∏–º –ø–æ–≤–µ–ª–∏—Ç–µ–ª–µ–º.',
            '–ù–µ —É–Ω—ã–≤–∞–π—Ç–µ - —É–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –∏ –∏–∑–±–∞–≤–∏—Ç–µ—Å—å –æ—Ç VSCode.',
            '–ù–µ —É–≥–∞–¥–∞–µ—à—å —Å–Ω–æ–≤–∞, –∏ —Ç—ã –±—É–¥–µ—à—å –ø–∏—Å–∞—Ç—å –Ω–∞ PHP –≤ Notepad',
            '–•–æ—á–µ—à—å –ø–∏—Å–∞—Ç—å JavaScript –≤ –±–ª–æ–∫–Ω–æ—Ç–µ –∏–ª–∏ –≤—Å—ë –∂–µ –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
            '–ö–∞–∫–æ–≥–æ —ç—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ FTP –≤ 2024 –≥–æ–¥—É? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!',
            '–î—É–º–∞—é –≤—ã —Å –ë–∏—Ç—Ä–∏–∫—Å–æ–º –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ. –ù–µ —Å—Ç–æ–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.',
            '–ù—É –∫–∞–∫ —Ç–∞–∫? –ê –Ω–∞ –≤–∏–¥ —Ç—ã —Ç–∞–∫–æ–π —É–º–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!',
            '–ï—â–µ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ - –µ—â–µ –æ–¥–∏–Ω —à–∞–Ω—Å –¥–ª—è —Ç–µ–±—è –Ω–µ –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ–ª–Ω—ã–º –Ω—É–±–æ–º. –ù–µ —É–ø—É—Å—Ç–∏ –µ–≥–æ!',
            '–î—É–º–∞–µ—à—å, —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —Å–ª–æ–≤ - —ç—Ç–æ —Å–ª–æ–∂–Ω–æ? –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤—Å—é —Å–≤–æ—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –Ω–∞ FORTRAN',
            '–¢–≤–æ–π –∫–æ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω–µ–Ω? –¢—ã –ø—Ä–æ—Å—Ç–æ –µ–≥–æ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑—É—á–∏–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!',
        ];

        this.secretWord = '';
        this.guesses = [];
        this.maxAttempts = 4;
        this.attemptsLeft = this.maxAttempts;
        this.hiddenWord = '';
        this.gameOver = false;

        this.startGame();
    }

    selectRandomWord() {
        const randomIndex = Math.floor(Math.random() * this.wordList.length);
        this.secretWord = this.wordList[randomIndex].toLowerCase();
        this.hiddenWord = '_'.repeat(this.secretWord.length);
        this.updateDisplay();
    }

    checkLetter(letter) {
        if (this.secretWord.includes(letter)) {
            for (let i = 0; i < this.secretWord.length; i++) {
                if (this.secretWord[i] === letter) {
                    this.hiddenWord = this.hiddenWord.substring(0, i) + letter + this.hiddenWord.substring(i + 1);
                }
            }
            if (!this.hiddenWord.includes('_')) {
                this.gameOver = true;
                this.logTarget.textContent = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
                this.audioWinTarget.play();
                console.log('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!');
            }
        } else {
            this.attemptsLeft--;
            if (this.attemptsLeft === 0) {
                this.gameOver = true;
                this.audioLoseTarget.play();

                let motivate = this.badList[Math.floor(Math.random() * this.badList.length)];
                this.logTarget.innerHTML =
                    "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: ¬´<span class='text-primary'>" +
                    this.secretWord +
                    '</span>¬ª ' +
                    "<span class='d-block text-balance opacity-50'>ü´£ " +
                    motivate +
                    '</span>';
                console.log('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: ' + this.secretWord);
            } else {
                console.log('–ù–µ–≤–µ—Ä–Ω–∞—è –±—É–∫–≤–∞. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ' + this.attemptsLeft);
                this.hangmanInputTarget.readonly = true;
                this.wordTarget.classList.add('animate-shake');
                this.audioWrongTarget.play();
                setTimeout(() => {
                    this.hangmanInputTarget.readonly = false;
                    this.wordTarget.classList.remove('animate-shake');
                }, 550);
            }
        }
        this.updateDisplay();
    }

    updateDisplay() {
        this.wordTarget.textContent = this.hiddenWord;
        this.attemptsTarget.textContent = '–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ' + this.attemptsLeft;

        if (this.gameOver === true && this.attemptsLeft > 0) {
            this.updateImage('win');
        } else if (this.attemptsLeft > 0) {
            this.updateImage(this.attemptsLeft);
        } else {
            this.updateImage('lose');
        }

        Array.prototype.slice
            .call(this.heartsTarget.querySelectorAll('svg'))
            .reverse()
            .forEach((heart, index) => {
                if (index + 1 > this.attemptsLeft) {
                    heart.classList.add('opacity-25');
                } else {
                    heart.classList.remove('opacity-25');
                }
            });
    }

    startGame() {
        this.gameOver = false;
        this.guesses = [];
        this.selectRandomWord();
        this.attemptsLeft = this.maxAttempts;
        this.updateImage(this.maxAttempts);
        this.hangmanInputTarget.disabled = false;

        this.heartsTarget.querySelectorAll('svg').forEach((heart, index) => {
            heart.classList.remove('opacity-25');
        });

        this.logTarget.textContent = '';
        console.log('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!');
        //console.log("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: " + this.secretWord);
    }

    guess(event) {
        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

        if (isMobile) {
            document.activeElement.blur();
        }

        event.preventDefault();

        if (this.gameOver) {
            this.hangmanInputTarget.value = '';
            this.hangmanInputTarget.disabled = true;
            //this.logTarget.textContent = "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.";
            console.log('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.');
            return;
        }

        this.logTarget.textContent = '';
        const letter = event.target.value.toLowerCase();

        console.log('–í–≤–µ–¥–µ–Ω–∞ –±—É–∫–≤–∞: ' + letter);

        if (!this.guesses.includes(letter)) {
            this.guesses.push(letter);
            this.checkLetter(letter);
        } else {
            this.logTarget.textContent = '–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç—É –±—É–∫–≤—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.';
            console.log('–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç—É –±—É–∫–≤—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.');
        }

        this.hangmanInputTarget.value = '';
    }

    updateImage(status) {
        this.imageTarget.querySelectorAll('img').forEach((image) => {
            if (image.dataset.status == status) {
                image.classList.remove('d-none');
            } else {
                image.classList.add('d-none');
            }
        });
    }

    clearInput(event) {
        event.target.value = '';
        this.hangmanInputTarget.value = '';

        console.log(this.hangmanInputTarget.value, event.target.value);
    }
}
